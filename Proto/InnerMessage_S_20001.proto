syntax = "proto3";
// using 

package ET;

//ResponseType InnerPingResponse
message InnerPingRequest // IRequest
{
}

message InnerPingResponse // IResponse
{
}

//ResponseType ObjectQueryResponse
message ObjectQueryRequest // IRequest
{
	int64 Key = 2;
	int64 InstanceId = 3;
}

//ResponseType A2M_Reload
message M2A_Reload // IRequest
{
}

message A2M_Reload // IResponse
{
}

//ResponseType G2G_LockResponse
message G2G_LockRequest // IRequest
{
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockResponse // IResponse
{
}

//ResponseType G2G_LockReleaseResponse
message G2G_LockReleaseRequest // IRequest
{
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockReleaseResponse // IResponse
{
}

//ResponseType ObjectAddResponse
message ObjectAddRequest // IRequest
{
	int32 Type = 2;
	int64 Key = 3;
	ActorId ActorId = 4;
}

message ObjectAddResponse // IResponse
{
}

//ResponseType ObjectLockResponse
message ObjectLockRequest // IRequest
{
	int32 Type = 2;
	int64 Key = 3;
	ActorId ActorId = 4;
	int32 Time = 5;
}
message ObjectLockResponse // IResponse
{
}

//ResponseType ObjectUnLockResponse
message ObjectUnLockRequest // IRequest
{
	int32 Type = 2;
	int64 Key = 3;
	ActorId OldActorId = 4;
	ActorId NewActorId = 5;
}
message ObjectUnLockResponse // IResponse
{
}

//ResponseType ObjectRemoveResponse
message ObjectRemoveRequest // IRequest
{
	int32 Type = 2;
	int64 Key = 3;
}
message ObjectRemoveResponse // IResponse
{
}

//ResponseType ObjectGetResponse
message ObjectGetRequest // IRequest
{
	int32 Type = 2;
	int64 Key = 3;
}
message ObjectGetResponse // IResponse
{
	int32 Type = 4;
	ActorId ActorId = 5;
}

//ResponseType G2R_GetLoginKey
message R2G_GetLoginKey // IRequest
{
	string Account = 2;
}

message G2R_GetLoginKey // IResponse
{
	int64 Key = 4;
	int64 GateId = 5;
}

message G2M_SessionDisconnect // ILocationMessage
{
}

message ObjectQueryResponse // IResponse
{
	bytes Entity = 4;
}

//ResponseType M2M_UnitTransferResponse
message M2M_UnitTransferRequest // IRequest
{
	ActorId OldActorId = 2;
	bytes Unit = 3;
	repeated bytes Entitys = 4;
}

message M2M_UnitTransferResponse // IResponse
{
}

//添加或更新缓存数据
//ResponseType Cache2Other_UpdateCache
message Other2Cache_UpdateCache // IRequest
{
	int64 UnitId = 1;
	//实体列表
	repeated string EntityTypeList = 2;
	repeated bytes EntityData = 3;
}

message Cache2Other_UpdateCache // IResponse
{
}

//获取缓存数据
//ResponseType Cache2Other_GetCache
message Other2Cache_GetCache // IRequest
{
	int64 UnitId = 1;
	repeated string ComponentNameList = 2;
}

message Cache2Other_GetCache // IResponse
{
	repeated string ComponentNameList = 1;
	repeated bytes Entitys = 2;
}

//删除缓存数据
//ResponseType Cache2Other_DeleteCache
message Other2Cache_DeleteCache // IRequest
{
	int64 UnitId = 1;
}

message Cache2Other_DeleteCache // IResponse
{
}

//玩家进入游戏
//ResponseType Other2G_EnterResponse
message G2Other_EnterRequest // IRequest
{
	int64 PlayerId = 1;
}

message Other2G_EnterResponse // IResponse
{
	int64 Id = 1;
}

//玩家退出游戏
//ResponseType Other2G_LeaveResponse
message G2Other_LeaveRequest // IRequest
{
	int64 PlayerId = 1;
}

message Other2G_LeaveResponse // IResponse
{
}

//守护进程请求保存数据
//ResponseType Other2W_SaveDataResponse
message W2Other_SaveDataRequest // IRequest
{

}

message Other2W_SaveDataResponse // IResponse
{

}

//守护进程关闭其他进程
//ResponseType Other2W_SaveDataResponse
message W2Other_CloseRequest // IRequest
{
	//要关闭的进程ID, 小于0时全部关闭
	int32 ProcessId = 1;
}

message W2Other_CloseResponse // IResponse
{

}

//守护进程开启其他进程
//ResponseType Other2W_SaveDataResponse
message W2Other_OpenRequest // IRequest
{
	//要关闭的进程ID, 小于0时全部开启
	int32 ProcessId = 1;
}

message W2Other_OpenResponse // IResponse
{

}